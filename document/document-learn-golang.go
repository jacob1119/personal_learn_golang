package main // 定义了包名

import "fmt" // 导入程序运行需要的包，fmt包实现了格式化IO的函数

func init() { // 项目启动后第一个执行的函数
	fmt.Print("hello") // fmt.Print("hello \n") == fmt.Println("hello ")
}

func main() { // 如果没有init函数，则main是第一个执行的函数
	fmt.Print(" world")
}

/*********************************************************
 *                             基础组成
 *
 * 包声明
 * 引入包
 * 函数
 * 变量
 * 语句 & 表达式
 * 注释
 *
 */

/*********************************************************
 *                            注释
 *
 * 单行注释： // content
 * 块注释： /* content * /
 *
 */

/*********************************************************
 *                            数据类型
 *
 * 数据类型：用于声明函数和变量
 *
 * 1：布尔型
 *    布尔型的值只能是常量true或false， 例：var b bool = true
 *
 * 2：数字类型
 *    整形int和浮点型float32，float64，go支持整形和浮点型数字，并原生支持复数，其中位运算采用补码。
 *    基于架构的类型。例如：int,uint和uintptr
 *        1> uint8 : 无符号8位整形 （0到255）
 *        2> uint16 : 无符号16位整形 （0到65535）
 *        3> uint32 : 无符号32位整形 （0到4294967295）
 *        4> uint64 : 无符号64位整形 （0到18446744073709551615）
 *        5> int8 : 有符号8位整形 （-128到127）
 *        6> int16 : 有符号16位整形 （-32768到-32768）
 *        7> int32 : 有符号32位整形 （-2147483648到2147483647）
 *        8> int64 : 无符号64位整形 （-9223372036854775808到9223372036854775807）
 *    浮点型：
 *        1> float32：IEEE-754 32位浮点数
 *        2> float64：IEEE-754 64位浮点数
 *        3> complex64：32位实数和虚数
 *        4> complex128：128位实数和虚数
 *    其他数字类型：
 *        1> byte：类似uint8
 *        2> rune：类似int32
 *        3> uint：32位或64位
 *        4> int：与uint一样大小
 *        5> uintptr：无符号整形，用于存放一个指针
 *
 *
 *
 * 3：字符串类型
 *    字符串就是一串固定长度的字符链接起来的字符序列，go的字符串是由单个字节拼接起来的。go字符串的字节使用UTF-8编码标识Unicode文本。
 *
 * 4：派生类型
 *    包括：
 *        （a）指针类型（Pointer）
 *        （b）数组类型
 *        （c）结构化类型（struct）
 *        （d）channel类型
 *        （e）函数类型
 *        （f）切片类型
 *        （g）接口类型（interface）
 *        （g）Map类型
 *
 *
 */

/*********************************************************
 *                 语言变量
 *    变量用来存储结算结果或表示值抽象。
 *    声明变量使用 var 关键字。var indentifier type 例如：var numbers int
 *    声明变量：
 *        1> 指定变量类型，声明后不赋值，使用默认值
 *            var v_name v_type
 *            var v_name = value
 *        2> 根据值自动判断类型
 *            var v_name = value
 *        3> 省略关键字 var，：= 左侧的变量不能被声明过，否则导致编译错误
 *            v_name := value
 *            例如：
 *            var a int = 10
 *            var b = 10
 *  		   c := 10
 * 			   实例：
 *  				package main
 *					var name string = 'job'
 *                 var age = 18
 *					var c bool
 *
 *					func main() {
 *						Println(name,age,c)
 *
 *		 4> 多变量声明
 *            //类型相同多个变量, 非全局变量
 *			  var vname1, vname2, vname3 type
 * 		  	  vname1, vname2, vname3 = v1, v2, v3
 *
 *			  var vname1, vname2, vname3 = v1, v2, v3 //和python很像,不需要显示声明类型，自动推断
 *
 *   			  vname1, vname2, vname3 := v1, v2, v3 //出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误
 *
 *			 // 这种因式分解关键字的写法一般用于声明全局变量
 *		      var (
 *			     vname1 v_type1
 *			     vname2 v_type2
 *			   )
 *
 *
 *
 *
 *
 *
 *
 *@1：像 int、float、bool 和 string 这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值
 *@2：当使用等号 = 将一个变量的值赋值给另一个变量时，如：j = i，实际上是在内存中将 i 的值进行了拷贝
 *@3：可以通过 &i 来获取变量 i 的内存地址，例如：0xf840000040（每次的地址都可能不一样）。值类型的变量的值存储在栈中。
 *		内存地址会根据机器的不同而有所不同，甚至相同的程序在不同的机器上执行后也会有不同的内存地址。因为每台机器可能有不同的存储器布局，并且位置分配也可能不同。
 *		更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。
 *		一个引用类型的变量 r1 存储的是 r1 的值所在的内存地址（数字），或内存地址中第一个字所在的位置
 *@4：自动推到类型变量声明:= 只能被用于函数体内，不可以用于全局变量的声明与赋值
 *@5：如果你想要交换两个变量的值，则可以简单地使用 a, b = b, a，两个变量的类型必须是相同。
 *@6：空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。
 *@7：_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值
 */

/*********************************************************
 *                            常量
 * 常量：常量是一个简单值的标识符，在程序运行时，不会被修改的量，
 *      数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型
 *		const identifier [type] = value
 *
 *
 * itoa：特殊常量，可以认为是一个可以被编译器修改的常量，
 * 		iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引
 *  	const (
 *   	   a = iota
 *    	   b = iota
 *    	   c = iota
 *		)
 *
 *		const (
 *   		a = iota
 *     	 	b
 *    	 	c
 *		)
 */

/*********************************************************
 *                            其他
 *
 * 1：函数func main()
 *       {       // 错误的写法，{ 不能单独成行
 *
 * 2：行分隔符：go中，每一行代表一个语句结束，不需要像PHP或C那样以;结尾，这些工作由go编译器自动完成，
 *            如果将多个语句写到同一行，必须人为使用;来区分。不推荐这样的做法
 *
 * 3：标识符： 标识符用来命名变量，类型等程序实体。标识符由数字，字符，下划线组成，首字符必须为字符或下划线
 *
 * 4：关键字：break	 default	func	interface	select case	defer
 *			 go	 map	struct chan	else	goto	package	switch
 *			 const	 fallthrough	if	range	type
 *			 continue	 for	import	return	var
 *
 * 5： 预定于字符：append	bool	byte	cap	close	complex	complex64	complex128	uint16
 *				 copy	 false	 float32	float64	imag	int	int8	int16	uint32
 *				 int32	 int64	 iota	 len	make	new	nil	panic	uint64
 *				 print	 println	real	recover	string	true	uint	uint8	uintptr
 *
 *
 *
 *
 *
 */
/*********************************************************
 *
 *
 *
 *
 *
 */
